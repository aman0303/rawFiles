{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "aksClusterName": {
            "type": "string",
            "defaultValue": "aks101cluster-vmss",
            "metadata": {
                "description": "The name of the Managed Cluster resource."
            }
        },
        "location": {
            "defaultValue": "[resourceGroup().location]",
            "type": "string",
            "metadata": {
                "description": "The location of AKS resource."
            }
        },
        "dnsPrefix": {
            "type": "string",
            "defaultValue": "[concat(parameters('aksClusterName'), '-', uniqueString(resourceGroup().name))]",
            "metadata": {
                "description": "Optional DNS prefix to use with hosted Kubernetes API server FQDN."
            }
        },
        "osDiskSizeGB": {
            "type": "int",
            "defaultValue": 1023,
            "metadata": {
                "description": "Disk size (in GiB) to provision for each of the agent pool nodes. This value ranges from 0 to 1023. Specifying 0 will apply the default disk size for that agentVMSize."
            },
            "minValue": 0,
            "maxValue": 1023
        },
        "agentCount": {
            "type": "int",
            "defaultValue": 3,
            "metadata": {
                "description": "The number of nodes for the cluster. 1 Node is enough for Dev/Test and minimum 3 nodes, is recommended for Production"
            },
            "minValue": 1,
            "maxValue": 100
        },
        "agentVMSize": {
            "type": "string",
            "defaultValue": "Standard_DS2_v2",
            "metadata": {
                "description": "The size of the Virtual Machine."
            }
        },
        "osType": {
            "type": "string",
            "defaultValue": "Linux",
            "allowedValues": [
                "Linux",
                "Windows"
            ],
            "metadata": {
                "description": "The type of operating system."
            }
        }
    },
    "variables": {
        "userAssignedIdentityName": "toRunWebServer",
        "roleAssignmentName": "[guid(concat(resourceGroup().id, 'contributor'))]",
        "contributorRoleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
        "deploymentScriptName": "InstallDependencyAndRunWebServer",
        "latestImagePath": "mci4mcontainerregistry.azurecr.io\\/ids.service:hello",
        "testConfigValue": "from-arm-sc-test"
    },
    "resources": [
        {
            "apiVersion": "2020-09-01",
            "type": "Microsoft.ContainerService/managedClusters",
            "location": "[parameters('location')]",
            "name": "[parameters('aksClusterName')]",
            "tags": {
                "displayname": "AKS Cluster"
            },
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "kubernetesVersion": "1.23.5",
                "enableRBAC": true,
                "dnsPrefix": "[parameters('dnsPrefix')]",
                "agentPoolProfiles": [
                    {
                        "name": "agentpool",
                        "osDiskSizeGB": "[parameters('osDiskSizeGB')]",
                        "count": "[parameters('agentCount')]",
                        "vmSize": "[parameters('agentVMSize')]",
                        "osType": "[parameters('osType')]",
                        "storageProfile": "ManagedDisks",
                        "type": "VirtualMachineScaleSets",
                        "mode": "System"
                    }
                ]
            }
        },
        {
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
            "apiVersion": "2018-11-30",
            "name": "[variables('userAssignedIdentityName')]",
            "location": "[resourceGroup().location]"
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2020-04-01-preview",
            "name": "[variables('roleAssignmentName')]",
            "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userAssignedIdentityName'))]"
            ],
            "properties": {
                "roleDefinitionId": "[variables('contributorRoleDefinitionId')]",
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userAssignedIdentityName')), '2015-08-31-preview').principalId]",
                "scope": "[resourceGroup().id]",
                "principalType": "ServicePrincipal"
            }
        },
        {
            "type": "Microsoft.Resources/deploymentScripts",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentScriptName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Authorization/roleAssignments', variables('roleAssignmentName'))]",
                "[resourceId('Microsoft.ContainerService/managedClusters', parameters('aksClusterName'))]"
            ],
            "kind": "AzureCLI",
            "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                    "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities',variables('userAssignedIdentityName'))]": {}
                }
            },
            "properties": {
                "AzCliVersion": "2.37.0",
                "arguments": "[format('{0} {1} {2} {3}', parameters('aksClusterName'), resourceGroup().name, variables('testConfigValue'), variables('latestImagePath'))]",
                "scriptContent": "
                    k8DeploymentFileUrl=\"https://raw.githubusercontent.com/aman0303/rawFiles/main/deployment.yml\";
                    appSettingsFileUrl=\"https://raw.githubusercontent.com/aman0303/rawFiles/main/appSettings.K8Pod.json\";

                    k8DeploymentFile=\"toUpdateDeployment.yml\";
                    appSettingsFile=\"toUpdateAppSettings.K8Pod.json\";

                    wget -O $k8DeploymentFile $k8DeploymentFileUrl;
                    wget -O $appSettingsFile $appSettingsFileUrl;

                    updatedK8DeploymentFile=\"./deployment.yml\";
                    updatedAppSettingsFile=\"./appSettings.K8Pod.json\";

                    sed \"s/##TEST_VALUE##/$3/g\" $appSettingsFile > $updatedAppSettingsFile;

                    idsServiceImage=$4;
                    #idsServiceImage=${idsServiceImage//\//\\/};

                    UUID=$(cat /proc/sys/kernel/random/uuid);
                    appSettingsConfigmap=\"app-settings-configmap-$UUID\";

                    echo \"---------------------------------------------------------------------------------------------\";
                    cat $k8DeploymentFile;
                    echo \"---------------------------------------------------------------------------------------------\";
                    echo $idsServiceImage;
                    echo \"---------------------------------------------------------------------------------------------\";

                    sed -e \"s/##IDS_SERVICE_IMAGE##/$idsServiceImage/g\" -e \"s/##APP_SETTINGS_CONFIGMAP##/$appSettingsConfigmap/g\" $k8DeploymentFile > $updatedK8DeploymentFile;

                    echo \"---------------------------------------------------------------------------------------------\";
                    cat $updatedK8DeploymentFile;
                    echo \"---------------------------------------------------------------------------------------------\";
                    cat $updatedAppSettingsFile;
                    echo \"---------------------------------------------------------------------------------------------\";

                    #Installs kubectl CLI
                    az aks install-cli;

                    PATH=\"$PATH:$HOME/bin:$PATH\"

                    kubectl version --short;

                    #Merge credentials into .kube/config
                    az aks get-credentials --resource-group $2 --name $1;

                    #default namespace will be used from here

                    kubectl create configmap $appSettingsConfigmap --from-file=$updatedAppSettingsFile;

                    kubectl apply -f $updatedK8DeploymentFile;

                    kubectl get deployments;

                    kubectl get services;
                    ",
                "cleanupPreference": "OnSuccess",
                "retentionInterval": "P1D"
            }
        }
    ],
    "outputs": {
        "controlPlaneFQDN": {
            "type": "string",
            "value": "[reference(resourceId('Microsoft.ContainerService/managedClusters/', parameters('aksClusterName'))).fqdn]"
        }
    }
}
